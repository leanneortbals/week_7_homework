Write a query to count the number of non-null rows in the low column.

SELECT COUNT(low)
FROM tutorial.aapl_historical_stock_price
WHERE low IS NOT NULL


Write a query that determines counts of every single column. Which column has the most null values?

SELECT count(date) AS "DATE COUNT", 
       count(year) AS "Year Count", 
       count(month) AS "Month Count", 
       count(open) AS "Open Count", 
       count(high) AS "High Count", 
       count(low) AS "Low Count", 
       count(close) AS "Close Count", 
       count(volume) AS "Volume Count", 
       count(id) AS "ID Count"
  FROM tutorial.aapl_historical_stock_price


Write a query to calculate the average opening price (hint: you will need to use both COUNT and SUM, as well as some simple arithmetic.).

SELECT SUM(open)/count(open) AS "Open Avg"
FROM tutorial.aapl_historical_stock_price


What was Apple's lowest stock price (at the time of this data collection)?

SELECT MIN(high) AS "High Lowest Price", MIN(low) AS "Low Lowest Price"
FROM tutorial.aapl_historical_stock_price
  

What was the highest single-day increase in Apple's share value?

SELECT MAX(close - open) AS "Highest Single Day Increase"
FROM tutorial.aapl_historical_stock_price


Write a query that calculates the average daily trade volume for Apple stock.

SELECT AVG(volume) AS "Average Trade Volume"
  FROM tutorial.aapl_historical_stock_price


Calculate the total number of shares traded each month. Order your results chronologically.

SELECT month, SUM(volume) AS "Total Trade Volume"
  FROM tutorial.aapl_historical_stock_price
  Group by month
  ORDER BY month


Write a query to calculate the average daily price change in Apple stock, grouped by year.

SELECT year, AVG(open - close) AS "Avg Price Change"
  FROM tutorial.aapl_historical_stock_price
  Group by year
  ORDER BY year


Write a query that calculates the lowest and highest prices that Apple stock achieved each month.

SELECT month, MAX(high) AS "Highest Price", MIN(low) AS "Lowest Price"
  FROM tutorial.aapl_historical_stock_price
  Group by month
  ORDER BY month


Write a query that includes a column that is flagged "yes" when a player is from California, and sort the results with those players first.

SELECT player_name, state,
      CASE WHEN state = 'CA' THEN 'yes' END AS from_california
FROM benn.college_football_players
ORDER BY from_california


Write a query that includes players' names and a column that classifies them into four categories based on height. Keep in mind that the answer we provide is only one of many possible answers, since you could divide players' heights in many ways.

SELECT player_name,
      CASE WHEN height < 60 THEN 'less than 60' 
           WHEN height BETWEEN 60 and 69 THEN '60-69'
           WHEN height BETWEEN 70 and 79 THEN '70-79'
           WHEN height >= 80 THEN '80 or above' END AS height_group
FROM benn.college_football_players

Write a query that selects all columns from benn.college_football_players and adds an additional column that displays the player's name if that player is a junior or senior.

SELECT *,
      CASE WHEN year = 'JR' THEN player_name 
                WHEN year = 'SR' THEN player_name END AS jr_sr_players
FROM benn.college_football_players


Write a query that counts the number of 300lb+ players for each of the following regions: West Coast (CA, OR, WA), Texas, and Other (Everywhere else).

SELECT CASE WHEN state IN ('WA', 'OR', 'CA') THEN 'west coast'
            WHEN state = 'TX' THEN 'Texas' 
            ELSE 'other' END AS region,
            COUNT(1) as count
FROM benn.college_football_players
WHERE weight > 300
GROUP BY 1

Write a query that calculates the combined weight of all underclass players (FR/SO) in California as well as the combined weight of all upperclass players (JR/SR) in California.

SELECT 
       CASE WHEN year IN ('FR', 'SO') THEN 'underclass'
            WHEN year IN ('JR', 'SR') THEN 'upperclass' 
            END AS year_class,
            SUM(weight) AS total_weight
FROM benn.college_football_players
WHERE state = 'CA'
GROUP BY 1


Write a query that displays the number of players in each state, with FR, SO, JR, and SR players in separate columns and another column for the total number of players. Order results such that states with the most players come first.
SELECT state,
       COUNT(CASE WHEN year = 'FR' THEN 1 ELSE NULL END) AS fr_count,
       COUNT(CASE WHEN year = 'SO' THEN 1 ELSE NULL END) AS so_count,
       COUNT(CASE WHEN year = 'JR' THEN 1 ELSE NULL END) AS jr_count,
       COUNT(CASE WHEN year = 'SR' THEN 1 ELSE NULL END) AS sr_count,
            count(1) AS total_players
FROM benn.college_football_players
GROUP BY state
ORDER BY total_players DESC


Write a query that shows the number of players at schools with names that start with A through M, and the number at schools with names starting with N - Z.

SELECT
       COUNT(CASE WHEN full_school_name < 'n' THEN 1 ELSE NULL END) AS a_m_count,
       COUNT(CASE WHEN full_school_name >= 'n' THEN  1 ELSE NULL END) AS n_z_count
FROM benn.college_football_players


Write a query that returns the unique values in the year column, in chronological order.

SELECT DISTINCT year
  FROM benn.college_football_players


Write a query that counts the number of unique values in the month column for each year.

SELECT COUNT(DISTINCT month) AS unique_months, year
  FROM tutorial.aapl_historical_stock_price
group by year


Write a query that separately counts the number of unique values in the month column and the number of unique values in the `year` column.

SELECT COUNT(DISTINCT month) AS unique_months,
       COUNT(DISTINCT year) AS unique_years
  FROM tutorial.aapl_historical_stock_price


Write a query that selects the school name, player name, position, and weight for every player in Georgia, ordered by weight (heaviest to lightest). Be sure to make an alias for the table, and to reference all column names in relation to the alias.

SELECT p.player_name, p.full_school_name, p.weight, p.position
  FROM benn.college_football_players p
 ORDER BY weight DESC


Write a query that displays player names, school names and conferences for schools in the "FBS (Division I-A Teams)" division.

SELECT p.player_name, p.full_school_name, t.conference
  FROM benn.college_football_players p
JOIN benn.college_football_teams t
    ON t.school_name = p.school_name
  WHERE t.division = 'FBS (Division I-A Teams)'


Write a query that performs an inner join between the tutorial.crunchbase_acquisitions table and the tutorial.crunchbase_companies table, but instead of listing individual rows, count the number of non-null rows in each table.

SELECT COUNT(c.*), count(a.*)
  FROM tutorial.crunchbase_companies c
INNER JOIN tutorial.crunchbase_acquisitions a
ON c.permalink = a.company_permalink


Modify the query above to be a LEFT JOIN. Note the difference in results.

SELECT COUNT(c.*), count(a.*)
  FROM tutorial.crunchbase_companies c
LEFT JOIN tutorial.crunchbase_acquisitions a
ON c.permalink = a.company_permalink


Count the number of unique companies (don't double-count companies) and unique acquired companies by state. Do not include results for which there is no state data, and order by the number of acquired companies from highest to lowest.

SELECT c.state_code, 
       COUNT(DISTINCT c.permalink) as unique_companies, 
       COUNT(DISTINCT a.acquirer_permalink) as unique_aquisitions
  FROM tutorial.crunchbase_companies c
LEFT JOIN tutorial.crunchbase_acquisitions a
ON c.permalink = a.company_permalink
WHERE c.state_code IS NOT NULL
GROUP BY c.state_code
ORDER BY unique_aquisitions DESC

Rewrite the previous practice query in which you counted total and acquired companies by state, but with a RIGHT JOIN instead of a LEFT JOIN. The goal is to produce the exact same results.

SELECT c.state_code, 
       COUNT(DISTINCT c.permalink) as unique_companies, 
       COUNT(DISTINCT a.acquirer_permalink) as unique_aquisitions
  FROM tutorial.crunchbase_acquisitions a
RIGHT JOIN tutorial.crunchbase_companies c
ON a.company_permalink = c.permalink
WHERE c.state_code IS NOT NULL
GROUP BY c.state_code
ORDER BY unique_aquisitions DESC


Write a query that shows a company's name, "status" (found in the Companies table), and the number of unique investors in that company. Order by the number of investors from most to fewest. Limit to only companies in the state of New York.

SELECT c.name, c.status,
       COUNT(DISTINCT i.investor_name) AS investors
  FROM tutorial.crunchbase_companies c
LEFT JOIN tutorial.crunchbase_investments i
    ON c.permalink = i.company_permalink
WHERE c.state_code = 'NY'
GROUP BY c.name, c.status
ORDER BY investors DESC


Write a query that lists investors based on the number of companies in which they are invested. Include a row for companies with no investor, and order from most companies to least.

SELECT DISTINCT i.investor_name,
       COUNT(DISTINCT c.permalink) as count_companies
  FROM tutorial.crunchbase_companies c
LEFT JOIN tutorial.crunchbase_investments i
    ON c.permalink = i.company_permalink
GROUP BY i.investor_name
ORDER BY count_companies DESC


Write a query that joins tutorial.crunchbase_companies and tutorial.crunchbase_investments_part1using a FULL JOIN. Count up the number of rows that are matched/unmatched as in the example above.
SELECT COUNT(CASE WHEN c.permalink IS NOT NULL AND i.company_permalink IS NULL 
             THEN c.permalink ELSE NULL END) AS company_table_only,
       COUNT(CASE WHEN i.company_permalink IS NOT NULL AND c.permalink IS NULL 
             THEN i.company_permalink ELSE NULL END) AS investor_table_only,
       COUNT(CASE WHEN i.company_permalink IS NOT NULL AND c.permalink IS NOT NULL 
             THEN c.permalink ELSE NULL END) AS both_tables
  FROM tutorial.crunchbase_companies c
FULL JOIN tutorial.crunchbase_investments_part1 i
    ON c.permalink = i.company_permalink


Write a query that appends the two crunchbase_investments datasets above (including duplicate values). Filter the first dataset to only companies with names that start with the letter "T", and filter the second to companies with names starting with "M" (both not case-sensitive). Only include the company_permalink, company_name, and investor_name columns.

SELECT company_permalink, company_name, investor_name
FROM tutorial.crunchbase_investments_part1
WHERE company_name ILIKE 'T%'
  
UNION ALL
  
SELECT company_permalink, company_name, investor_name
FROM tutorial.crunchbase_investments_part2
WHERE company_name ILIKE 'M%'


Write a query that shows 3 columns. The first indicates which dataset (part 1 or 2) the data comes from, the second shows company status, and the third is a count of the number of investors. 

SELECT 'part1' AS dataset, c.status, 
       COUNT(i.investor_permalink) AS count_investors
FROM tutorial.crunchbase_investments_part1 i
JOIN tutorial.crunchbase_companies c
  ON i.company_permalink = c.permalink
GROUP BY c.status, dataset
  
UNION ALL
  
SELECT 'part2' AS dataset, c.status, 
       COUNT(i.investor_permalink) AS count_investors
FROM tutorial.crunchbase_investments_part2 i
JOIN tutorial.crunchbase_companies c
  ON i.company_permalink = c.permalink
GROUP BY c.status, dataset


